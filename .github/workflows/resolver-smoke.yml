---
name: "Resolver pipeline â€” smoke"

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: resolver-pipeline-smoke-${{ github.ref }}
  cancel-in-progress: true

jobs:
  smoke:
    name: "Smoke pipeline (stubs)"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PYTHONUNBUFFERED: "1"
      PERIOD_LABEL: ci-smoke
      RESOLVER_PERIOD: ci-smoke
      RESOLVER_STAGING_DIR: data/staging
      RESOLVER_INGESTION_MODE: stubs
      RESOLVER_FAIL_ON_STUB_ERROR: "0"
      RESOLVER_DEBUG: "0"
      SMOKE_MIN_ROWS: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install resolver dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r resolver/requirements.txt
          pip install 'duckdb>=1.0,<2.0'

      - name: Reset staging directories
        run: |
          set -euo pipefail
          rm -rf "data/staging/${PERIOD_LABEL}"
          rm -rf "data/snapshots/${PERIOD_LABEL}"

      - name: Prepare raw staging (stubs)
        env:
          PERIOD_LABEL: ci-smoke
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .ci/exitcodes
          RAW_DIR="data/staging/${PERIOD_LABEL}/raw"
          mkdir -p "${RAW_DIR}"

          set +e
          python -m resolver.ingestion.ifrc_go_stub --out "${RAW_DIR}"
          status=$?
          set -euo pipefail

          if [ "${status}" -eq 0 ]; then
            echo "exit=0" > .ci/exitcodes/run_stubs
          else
            echo "exit=${status}" > .ci/exitcodes/run_stubs
            echo "IFRC stub failed with exit code ${status}" >&2
            exit ${status}
          fi

          echo "Raw contents:"
          ls -lh "${RAW_DIR}" || true

      - name: Discover normalizable sources
        env:
          PERIOD_LABEL: ci-smoke
        shell: bash
        run: |
          set -euo pipefail
          python scripts/ci/discover_normalizable_sources.py "${PERIOD_LABEL}" | tee _sources.env
          grep "^SOURCES=" _sources.env >> "$GITHUB_ENV"

      - name: Normalize
        env:
          PERIOD_LABEL: ci-smoke
          SOURCES: ${{ env.SOURCES }}
        run: |
          set -euo pipefail
          python -m resolver.transform.normalize \
            --in "data/staging/${PERIOD_LABEL}/raw" \
            --out "data/staging/${PERIOD_LABEL}/canonical" \
            --period "${PERIOD_LABEL}" \
            --sources "${SOURCES}"

      - name: Validate stub outputs (rows >= ${{ env.SMOKE_MIN_ROWS }})
        id: smoke_assert
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .ci/exitcodes .ci/diagnostics
          canonical_dir="data/staging/${PERIOD_LABEL}/canonical"

          set +e
          python scripts/ci/smoke_assert.py \
            --canonical-dir "${canonical_dir}" \
            --min-rows "${SMOKE_MIN_ROWS}" \
            --out ".ci/diagnostics/smoke-assert.json"
          status=$?
          set -euo pipefail

          total_rows="n/a"
          if [ -f .ci/diagnostics/smoke-assert.json ]; then
            set +e
            total_rows=$(python -c "import json, pathlib; print(json.loads(pathlib.Path('.ci/diagnostics/smoke-assert.json').read_text(encoding='utf-8')).get('total_rows', 'n/a'))" 2>/dev/null)
            py_status=$?
            set -euo pipefail
            if [ "${py_status}" -ne 0 ] || [ -z "${total_rows}" ]; then
              total_rows="n/a"
            fi
          fi

          echo "exit=${status} rows=${total_rows} min=${SMOKE_MIN_ROWS}" > .ci/exitcodes/gate_rows

          exit "${status}"

      - name: Load / derive / export
        env:
          PERIOD_LABEL: ci-smoke
        run: |
          set -euo pipefail
          python -m resolver.tools.load_and_derive load-canonical \
            --in "data/staging/${PERIOD_LABEL}/canonical"
          python -m resolver.tools.load_and_derive derive-deltas \
            --period "${PERIOD_LABEL}" --allow-negatives 1
          python -m resolver.tools.load_and_derive export \
            --period "${PERIOD_LABEL}" --format parquet \
            --out "data/snapshots/${PERIOD_LABEL}"

      - name: Optional smoke checks
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .ci/exitcodes

          if [ -f data/resolver.duckdb ]; then
            echo "DuckDB present"
            echo "exit=0" > .ci/exitcodes/check_duckdb
          else
            echo "DuckDB missing (expected in smoke)"
            echo "exit=0" > .ci/exitcodes/check_duckdb
          fi

          if ls -lh data/snapshots 1>/dev/null 2>&1; then
            ls -lh data/snapshots || true
          else
            echo "data/snapshots missing (allowed in smoke)"
          fi
          echo "exit=0" > .ci/exitcodes/ls_snapshots

          logs_present="false"
          if ls -lh resolver/logs 1>/dev/null 2>&1; then
            ls -lh resolver/logs || true
            logs_present="true"
          fi
          if ls -lh data/logs 1>/dev/null 2>&1; then
            ls -lh data/logs || true
            logs_present="true"
          fi
          if [ "${logs_present}" = "false" ]; then
            echo "resolver/data logs missing (allowed in smoke)"
          fi
          echo "exit=0" > .ci/exitcodes/ls_logs

      - name: Collect diagnostics (smoke)
        if: always()
        id: collect_smoke
        uses: ./.github/actions/collect-diagnostics
        with:
          job_name: pipeline-smoke
          mode: smoke
          smoke_min_rows: ${{ env.SMOKE_MIN_ROWS }}
          smoke_canonical_dir: "data/staging/${{ env.PERIOD_LABEL }}/canonical"

      - name: Upload diagnostics (smoke)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-pipeline-smoke-${{ github.run_id }}-${{ github.run_attempt }}
          path: dist/diagnostics-pipeline-smoke-${{ github.run_id }}-${{ github.run_attempt }}.zip
          if-no-files-found: ignore
          retention-days: 7
          overwrite: true

      - name: Upload summary mirror (smoke)
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: summary-pipeline-smoke-${{ github.run_id }}-${{ github.run_attempt }}
          path: dist/diag-pipeline-smoke/SUMMARY.md
          if-no-files-found: ignore
          retention-days: 7
          overwrite: true

      - name: Upload snapshot artifacts
        uses: actions/upload-artifact@v4
        with:
          name: resolver-smoke-snapshots
          path: data/snapshots/${PERIOD_LABEL}/*.parquet
          if-no-files-found: ignore
          retention-days: 7
          overwrite: true

      - name: Enforce smoke row threshold
        if: "${{ steps.smoke_assert.outcome == 'failure' }}"
        run: |
          echo "Smoke assertion threshold not met; see diagnostics." >&2
          exit 2
