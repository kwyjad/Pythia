name: resolver-ci

on:
  push:
    branches:
      - "**"
    paths:
      - "resolver/**"
      - ".github/workflows/**"
      - "!Dashboard/**"
  pull_request:
    paths:
      - "resolver/**"
      - ".github/workflows/**"
      - "!Dashboard/**"

permissions:
  contents: read

jobs:
  offline_connector_smoke:
    runs-on: ubuntu-latest
    env:
      RESOLVER_DUCKDB_DISABLE_MERGE: "1"
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug repo context
        run: |
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          python -c "import pathlib; p = pathlib.Path().resolve(); print('CWD:', p); print('Tree:', len(list(p.glob('**/*'))))"

      - name: "Anti-drift: assert no legacy repo references"
        run: |
          part_a="spa"
          part_b="gbot"
          script_path="scripts/ci/assert_no_${part_a}${part_b}_refs.sh"
          chmod +x "$script_path"
          "$script_path"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            resolver/requirements.txt
            resolver/requirements-dev.txt

      - name: Confirm Pythia root
        run: ls -la && test -f pyproject.toml

      - name: Install dependencies (project + db + tests)
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -e .[db,test]

      - name: Install DuckDB (ensure available for tests)
        run: |
          python -m pip install --upgrade pip
          python -m pip install "duckdb>=1.0,<2"

      - name: Verify DuckDB presence
        run: |
          python - <<'PY'
          import importlib.util, sys
          spec = importlib.util.find_spec("duckdb")
          if spec is None:
              print("❌ DuckDB not installed — cannot run DB parity tests.")
              sys.exit(1)
          import duckdb
          print("✅ DuckDB installed:", duckdb.__version__)
          PY
      - name: Show resolver import location & DuckDB version
        run: |
          python - <<'PY'
          import sys, pathlib, resolver, duckdb
          print("Python executable:", sys.executable)
          print("resolver module path:", pathlib.Path(resolver.__file__).resolve())
          print("duckdb version:", getattr(duckdb, "__version__", "n/a"))
          PY
      - name: Connector Smoke (offline)
        run: |
          pytest -q resolver/tests/test_ingestion_smoke_all_connectors.py
      - name: ReliefWeb PDF Unit Tests (mocked extractors)
        run: |
          pytest -q resolver/tests/ingestion/test_reliefweb_pdf.py
      - name: Docs Link Check (non-blocking)
        continue-on-error: true
        run: |
          python - <<'PY'
          import pathlib
          import re
          import sys

          root = pathlib.Path('.').resolve()
          md_files = [p for p in root.glob('resolver/**/*.md')]
          pattern = re.compile(r'\[[^\]]+\]\(([^)]+)\)')
          broken = []

          for md in md_files:
              text = md.read_text(encoding='utf-8')
              for match in pattern.finditer(text):
                  link = match.group(1)
                  if link.startswith(('http://', 'https://', 'mailto:')):
                      continue
                  if link.startswith('#') or link.startswith('?'):
                      continue
                  target_str = link.split('#', 1)[0]
                  target_path = (md.parent / target_str).resolve()
                  if not target_path.exists():
                      broken.append(f"{md.relative_to(root)} -> {link}")

          if broken:
              print('Broken Markdown links found:')
              for item in broken:
                  print(f" - {item}")
              sys.exit(1)
          else:
              print('No broken intra-repo Markdown links found.')
          PY

  tests-db:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    name: tests (db backend)
    runs-on: ubuntu-latest
    env:
      RESOLVER_API_BACKEND: db
      RESOLVER_DB_URL: duckdb:///${{ github.workspace }}/.ci-resolver.duckdb
      RESOLVER_LOG_LEVEL: DEBUG
      RESOLVER_DUCKDB_DISABLE_MERGE: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug repo context
        run: |
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          python -c "import pathlib; p = pathlib.Path().resolve(); print('CWD:', p); print('Tree:', len(list(p.glob('**/*'))))"

      - name: Check DB tests present
        id: dbfiles
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "resolver/tests/test_db_parity.py" ] || [ -f "resolver/tests/test_duckdb_idempotency.py" ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
            echo "Found DB tests."
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
            echo "No DB tests found; will skip DB test steps."
          fi

      - name: "Anti-drift: assert no legacy repo references"
        if: steps.dbfiles.outputs.present == 'true'
        run: |
          part_a="spa"
          part_b="gbot"
          script_path="scripts/ci/assert_no_${part_a}${part_b}_refs.sh"
          chmod +x "$script_path"
          "$script_path"

      - name: Set up Python
        if: steps.dbfiles.outputs.present == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Confirm Pythia root
        if: steps.dbfiles.outputs.present == 'true'
        run: ls -la && test -f pyproject.toml

      - name: Install dependencies (project + db + tests)
        if: steps.dbfiles.outputs.present == 'true'
        env:
          PIP_NO_CACHE_DIR: "1"
          PIP_DEFAULT_TIMEOUT: "60"
          PIP_INDEX_URL: ${{ secrets.PIP_INDEX_URL }}
          PIP_EXTRA_INDEX_URL: ${{ secrets.PIP_EXTRA_INDEX_URL }}
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel setuptools
          pip install -e .[db,test]

      - name: Install DuckDB (ensure available for tests)
        if: steps.dbfiles.outputs.present == 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install "duckdb>=1.0,<2"

      - name: Verify DuckDB presence
        if: steps.dbfiles.outputs.present == 'true'
        run: |
          python - <<'PY'
          import importlib.util, sys
          spec = importlib.util.find_spec("duckdb")
          if spec is None:
              print("❌ DuckDB not installed — cannot run DB parity tests.")
              sys.exit(1)
          import duckdb
          print("✅ DuckDB installed:", duckdb.__version__)
          PY

      - name: Show resolver import location & DuckDB version
        if: steps.dbfiles.outputs.present == 'true'
        run: |
          python - <<'PY'
          import sys, pathlib, resolver, duckdb
          print("Python executable:", sys.executable)
          print("resolver module path:", pathlib.Path(resolver.__file__).resolve())
          print("duckdb version:", getattr(duckdb, "__version__", "n/a"))
          PY

      - name: Show environment
        if: steps.dbfiles.outputs.present == 'true'
        run: |
          python -V
          python -c "import duckdb,sys;print('duckdb',duckdb.__version__)"
          echo "BACKEND=$RESOLVER_API_BACKEND"
          echo "DB_URL=$RESOLVER_DB_URL"

      - name: Run tests (db)
        if: steps.dbfiles.outputs.present == 'true'
        run: pytest -q

      - name: Skip DB tests (not present)
        if: steps.dbfiles.outputs.present != 'true'
        run: echo "::notice ::Skipping DB tests (files not present in this repo/branch)."
      - name: Upload DB parity diagnostics
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: db-parity-diagnostics
          path: |
            **/parity_mismatch_expected.csv
            **/parity_mismatch_db.csv
            **/parity_mismatch_cell_diffs.csv
          if-no-files-found: ignore
