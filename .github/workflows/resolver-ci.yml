name: resolver-ci

on:
  push:
    branches:
      - "**"
    paths:
      - "resolver/**"
      - ".github/workflows/**"
      - "!Dashboard/**"
  pull_request:
    paths:
      - "resolver/**"
      - ".github/workflows/**"
      - "!Dashboard/**"

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  offline_connector_smoke:
    name: offline-connector-smoke (duckdb=${{ matrix.duckdb_label }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - duckdb_spec: "duckdb==0.10.*"
            duckdb_label: "0_10_x"
          - duckdb_spec: "duckdb"
            duckdb_label: "latest"
    runs-on: ubuntu-latest
    env:
      RESOLVER_DUCKDB_DISABLE_MERGE: "1"
      RESOLVER_DIAG: ${{ contains(matrix.duckdb_label, '0_10') && '1' || '0' }}
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show commit context
        run: |
          echo "GITHUB_SHA=${GITHUB_SHA}"
          echo "PR_HEAD_SHA=${{ github.event.pull_request.head.sha || '' }}"
          git rev-parse HEAD
          git show -s --date=iso --format='%H %cd %s'

      - name: "Anti-drift: assert no legacy repo references"
        run: |
          part_a="spa"
          part_b="gbot"
          script_path="scripts/ci/assert_no_${part_a}${part_b}_refs.sh"
          chmod +x "$script_path"
          "$script_path"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            resolver/requirements.txt
            resolver/requirements-dev.txt

      - name: Install project in editable mode
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip uninstall -y resolver || true
          pip install -e .[db,test]
          python -m pip install "${{ matrix.duckdb_spec }}"

      - name: Print resolver & DuckDB stamps
        run: |
          git rev-parse HEAD
          python - <<'PY'
          import hashlib, inspect, pathlib, sys
          import duckdb, resolver
          import resolver.db.duckdb_io as duckdb_io

          print("Python executable:", sys.executable)
          print("Python version:", sys.version)
          resolver_path = pathlib.Path(resolver.__file__).resolve()
          duckdb_io_path = pathlib.Path(inspect.getfile(duckdb_io)).resolve()
          print("resolver module path:", resolver_path)
          print("duckdb_io.py path:", duckdb_io_path)
          print("duckdb_io.py sha256:", hashlib.sha256(duckdb_io_path.read_bytes()).hexdigest())
          print("duckdb version:", getattr(duckdb, "__version__", "unknown"))
          PY

      - name: Run offline connector smoke tests
        run: |
          pytest -q \
            resolver/tests/test_ingestion_smoke_all_connectors.py \
            resolver/tests/ingestion/test_reliefweb_pdf.py \
            --junitxml=pytest-junit.xml

      - name: Docs Link Check (non-blocking)
        continue-on-error: true
        run: |
          python - <<'PY'
          import pathlib
          import re
          import sys

          root = pathlib.Path('.').resolve()
          md_files = [p for p in root.glob('resolver/**/*.md')]
          pattern = re.compile(r'\[[^\]]+\]\(([^)]+)\)')
          broken = []

          for md in md_files:
              text = md.read_text(encoding='utf-8')
              for match in pattern.finditer(text):
                  link = match.group(1)
                  if link.startswith(('http://', 'https://', 'mailto:')):
                      continue
                  if link.startswith('#') or link.startswith('?'):
                      continue
                  target_str = link.split('#', 1)[0]
                  target_path = (md.parent / target_str).resolve()
                  if not target_path.exists():
                      broken.append(f"{md.relative_to(root)} -> {link}")

          if broken:
              print('Broken Markdown links found:')
              for item in broken:
                  print(f" - {item}")
              sys.exit(1)
          else:
              print('No broken intra-repo Markdown links found.')
          PY

      - name: Build diagnostics bundle
        if: always()
        run: |
          suite="${{ github.job }}-${{ matrix.duckdb_label }}"
          python -m resolver.tools.ci_diag_bundle \
            --out diagnostics.zip \
            --db-url "${{ env.RESOLVER_DB_URL || '' }}" \
            --suite "$suite" \
            --duckdb-version "$(python -c "import duckdb;print(getattr(duckdb,'__version__','unknown'))")"

      - name: Upload diagnostics bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-bundle-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}-${{ matrix.duckdb_label || 'na' }}
          path: diagnostics.zip
          overwrite: true
  tests-db:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    name: tests (db backend, duckdb=${{ matrix.duckdb_label }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - duckdb_spec: "duckdb==0.10.*"
            duckdb_label: "0_10_x"
          - duckdb_spec: "duckdb"
            duckdb_label: "latest"
    runs-on: ubuntu-latest
    env:
      RESOLVER_API_BACKEND: db
      RESOLVER_DB_URL: duckdb:///${{ github.workspace }}/.ci-resolver.duckdb
      RESOLVER_LOG_LEVEL: DEBUG
      RESOLVER_DUCKDB_DISABLE_MERGE: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show commit context
        run: |
          echo "GITHUB_SHA=${GITHUB_SHA}"
          echo "PR_HEAD_SHA=${{ github.event.pull_request.head.sha || '' }}"
          git rev-parse HEAD
          git show -s --date=iso --format='%H %cd %s'

      - name: "Anti-drift: assert no legacy repo references"
        run: |
          part_a="spa"
          part_b="gbot"
          script_path="scripts/ci/assert_no_${part_a}${part_b}_refs.sh"
          chmod +x "$script_path"
          "$script_path"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install project in editable mode
        env:
          PIP_NO_CACHE_DIR: "1"
          PIP_DEFAULT_TIMEOUT: "60"
          PIP_INDEX_URL: ${{ secrets.PIP_INDEX_URL }}
          PIP_EXTRA_INDEX_URL: ${{ secrets.PIP_EXTRA_INDEX_URL }}
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip uninstall -y resolver || true
          pip install -e .[db,test]
          python -m pip install "${{ matrix.duckdb_spec }}"

      - name: Print resolver & DuckDB stamps
        run: |
          git rev-parse HEAD
          echo "DB_URL=$RESOLVER_DB_URL"
          python - <<'PY'
          import hashlib, inspect, pathlib, sys
          import duckdb, resolver
          import resolver.db.duckdb_io as duckdb_io

          print("Python executable:", sys.executable)
          print("Python version:", sys.version)
          resolver_path = pathlib.Path(resolver.__file__).resolve()
          duckdb_io_path = pathlib.Path(inspect.getfile(duckdb_io)).resolve()
          print("resolver module path:", resolver_path)
          print("duckdb_io.py path:", duckdb_io_path)
          print("duckdb_io.py sha256:", hashlib.sha256(duckdb_io_path.read_bytes()).hexdigest())
          print("duckdb version:", getattr(duckdb, "__version__", "unknown"))
          PY

      - name: Run database-backed tests
        run: pytest -q --junitxml=pytest-junit.xml

      - name: Build diagnostics bundle
        if: always()
        run: |
          suite="${{ github.job }}-${{ matrix.duckdb_label }}"
          python -m resolver.tools.ci_diag_bundle \
            --out diagnostics.zip \
            --db-url "$RESOLVER_DB_URL" \
            --suite "$suite" \
            --duckdb-version "$(python -c "import duckdb;print(getattr(duckdb,'__version__','unknown'))")"

      - name: Upload diagnostics bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-bundle-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}-${{ matrix.duckdb_label || 'na' }}
          path: diagnostics.zip
          overwrite: true
  tests-db-nocache:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    needs: tests-db
    name: tests (db backend, cache disabled, duckdb=${{ matrix.duckdb_label }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - duckdb_spec: "duckdb==0.10.*"
            duckdb_label: "0_10_x"
          - duckdb_spec: "duckdb"
            duckdb_label: "latest"
    runs-on: ubuntu-latest
    env:
      RESOLVER_API_BACKEND: db
      RESOLVER_DB_URL: duckdb:///${{ github.workspace }}/.ci-resolver.duckdb
      RESOLVER_LOG_LEVEL: DEBUG
      RESOLVER_DUCKDB_DISABLE_MERGE: "1"
      RESOLVER_DISABLE_CONN_CACHE: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show commit context
        run: |
          echo "GITHUB_SHA=${GITHUB_SHA}"
          echo "PR_HEAD_SHA=${{ github.event.pull_request.head.sha || '' }}"
          git rev-parse HEAD
          git show -s --date=iso --format='%H %cd %s'

      - name: "Anti-drift: assert no legacy repo references"
        run: |
          part_a="spa"
          part_b="gbot"
          script_path="scripts/ci/assert_no_${part_a}${part_b}_refs.sh"
          chmod +x "$script_path"
          "$script_path"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install project in editable mode
        env:
          PIP_NO_CACHE_DIR: "1"
          PIP_DEFAULT_TIMEOUT: "60"
          PIP_INDEX_URL: ${{ secrets.PIP_INDEX_URL }}
          PIP_EXTRA_INDEX_URL: ${{ secrets.PIP_EXTRA_INDEX_URL }}
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip uninstall -y resolver || true
          pip install -e .[db,test]
          python -m pip install "${{ matrix.duckdb_spec }}"

      - name: Print resolver & DuckDB stamps
        run: |
          git rev-parse HEAD
          echo "DB_URL=$RESOLVER_DB_URL"
          echo "CACHE_DISABLED=$RESOLVER_DISABLE_CONN_CACHE"
          python - <<'PY'
          import hashlib, inspect, pathlib, sys
          import duckdb, resolver
          import resolver.db.duckdb_io as duckdb_io

          print("Python executable:", sys.executable)
          print("Python version:", sys.version)
          resolver_path = pathlib.Path(resolver.__file__).resolve()
          duckdb_io_path = pathlib.Path(inspect.getfile(duckdb_io)).resolve()
          print("resolver module path:", resolver_path)
          print("duckdb_io.py path:", duckdb_io_path)
          print("duckdb_io.py sha256:", hashlib.sha256(duckdb_io_path.read_bytes()).hexdigest())
          print("duckdb version:", getattr(duckdb, "__version__", "unknown"))
          PY

      - name: Run database-backed tests (cache disabled)
        run: pytest -q --junitxml=pytest-junit.xml

      - name: Build diagnostics bundle
        if: always()
        run: |
          suite="${{ github.job }}-${{ matrix.duckdb_label }}"
          python -m resolver.tools.ci_diag_bundle \
            --out diagnostics.zip \
            --db-url "$RESOLVER_DB_URL" \
            --suite "$suite" \
            --duckdb-version "$(python -c "import duckdb;print(getattr(duckdb,'__version__','unknown'))")"

      - name: Upload diagnostics bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-bundle-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}-${{ matrix.duckdb_label || 'na' }}
          path: diagnostics.zip
          overwrite: true

