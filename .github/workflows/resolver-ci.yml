name: resolver-ci

on:
  pull_request:
    paths:
      - "resolver/**"
      - ".github/workflows/resolver-ci.yml"
  workflow_dispatch: {}
  schedule:
    # Daily at 20:10 UTC â‰ˆ 23:10 Europe/Istanbul (UTC+3)
    - cron: "10 20 * * *"

permissions:
  contents: read

concurrency:
  group: resolver-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pr_check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      ACLED_REFRESH_TOKEN: ${{ secrets.ACLED_REFRESH_TOKEN }}
      ACLED_USERNAME: ${{ secrets.ACLED_USERNAME }}
      ACLED_PASSWORD: ${{ secrets.ACLED_PASSWORD }}
      DTM_API_PRIMARY_KEY: ${{ secrets.DTM_API_PRIMARY_KEY }}
      DTM_API_SECONDARY_KEY: ${{ secrets.DTM_API_SECONDARY_KEY }}
      DTM_API_HEADER_NAME: ${{ vars.DTM_API_HEADER_NAME }}
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            resolver/requirements.txt
            resolver/requirements-dev.txt
            pyproject.toml
            poetry.lock

      - name: Install dependencies
        shell: bash
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          fi
          python -m pip install -r resolver/requirements.txt -r resolver/requirements-dev.txt

      - name: Configure CI environment
        shell: bash
        run: |
          set -euo pipefail
          source .github/workflows/partials/ci_env.sh
          for var in DISABLE_GIT_PUSH RESOLVER_CI PYTHONWARNINGS; do
            echo "$var=${!var}" >> "$GITHUB_ENV"
          done

      - name: Run ingestion (real connectors only)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          RESOLVER_DEBUG: "1"
          RESOLVER_MAX_PAGES: "5"
          RESOLVER_MAX_RESULTS: "1000"
          RESOLVER_INGESTION_MODE: real
          RESOLVER_FAIL_ON_STUB_ERROR: "0"
          WFP_MVAM_ALLOW_PERCENT: "1"
          WFP_MVAM_DENOMINATOR_FILE: "resolver/data/population.csv"
          WORLDPOP_PRODUCT: "un_adj_unconstrained"
        run: |
          set -euxo pipefail
          python resolver/ingestion/run_all_stubs.py

      - name: Run stubs (non-blocking)
        if: ${{ always() }}
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          RESOLVER_INGESTION_MODE: stubs
          RESOLVER_FAIL_ON_STUB_ERROR: "0"
        run: |
          set -euxo pipefail
          python resolver/ingestion/run_all_stubs.py

      - name: Upload ingestion logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ingestion-logs-${{ github.run_id }}
          path: |
            resolver/logs/ingestion/**
            !resolver/logs/ingestion/**/.gitkeep

      - name: Export facts
        shell: bash
        run: |
          set -euxo pipefail
          python resolver/tools/export_facts.py --in resolver/staging --out resolver/exports

      - name: Validate facts
        shell: bash
        run: |
          set -euxo pipefail
          python resolver/tools/validate_facts.py --facts resolver/exports/facts.csv

      - name: Freeze snapshot
        shell: bash
        run: |
          set -euxo pipefail
          python resolver/tools/freeze_snapshot.py --facts resolver/exports/facts.csv --month $(date -u +%Y-%m)

      - name: Precedence at provisional cutoff (last day of current month UTC)
        shell: bash
        run: |
          LAST_UTC=$(date -u -d "$(date -u +%Y-%m-01) +1 month -1 day" +%Y-%m-%d)
          python resolver/tools/precedence_engine.py --facts resolver/exports/facts.csv --cutoff "$LAST_UTC"

      - name: Build review queue
        shell: bash
        run: |
          set -euxo pipefail
          python resolver/review/make_review_queue.py

      - name: Check artifact and repo sizes
        shell: bash
        run: |
          set -euxo pipefail
          python resolver/tools/check_sizes.py
        env:
          RESOLVER_LIMIT_PARQUET_MB: "150"
          RESOLVER_LIMIT_CSV_MB: "25"
          RESOLVER_LIMIT_REPO_MB: "2000"

      - name: Run data-contract tests (pytest)
        shell: bash
        run: |
          set -euxo pipefail
          pytest resolver/tests -q

      - name: Upload resolver artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: resolver-pr-${{ github.run_id }}
          path: |
            resolver/staging/*
            resolver/exports/*
            resolver/snapshots/**
          if-no-files-found: warn

  nightly_state:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    env:
      ACLED_REFRESH_TOKEN: ${{ secrets.ACLED_REFRESH_TOKEN }}
      ACLED_USERNAME: ${{ secrets.ACLED_USERNAME }}
      ACLED_PASSWORD: ${{ secrets.ACLED_PASSWORD }}
      DTM_API_PRIMARY_KEY: ${{ secrets.DTM_API_PRIMARY_KEY }}
      DTM_API_SECONDARY_KEY: ${{ secrets.DTM_API_SECONDARY_KEY }}
      DTM_API_HEADER_NAME: ${{ vars.DTM_API_HEADER_NAME }}
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            resolver/requirements.txt
            resolver/requirements-dev.txt
            pyproject.toml
            poetry.lock

      - name: Install dependencies
        shell: bash
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          fi
          python -m pip install -r resolver/requirements.txt -r resolver/requirements-dev.txt

      - name: Configure CI environment
        shell: bash
        run: |
          set -euo pipefail
          source .github/workflows/partials/ci_env.sh
          for var in DISABLE_GIT_PUSH RESOLVER_CI PYTHONWARNINGS; do
            echo "$var=${!var}" >> "$GITHUB_ENV"
          done

      - name: Run ingestion (real connectors only)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          RESOLVER_DEBUG: "1"
          RESOLVER_MAX_PAGES: "5"
          RESOLVER_MAX_RESULTS: "1000"
          RESOLVER_INGESTION_MODE: real
          RESOLVER_FAIL_ON_STUB_ERROR: "0"
          WFP_MVAM_ALLOW_PERCENT: "1"
          WFP_MVAM_DENOMINATOR_FILE: "resolver/data/population.csv"
          WORLDPOP_PRODUCT: "un_adj_unconstrained"
        run: |
          set -euxo pipefail
          python resolver/ingestion/run_all_stubs.py

      - name: Run stubs (non-blocking)
        if: ${{ always() }}
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          RESOLVER_INGESTION_MODE: stubs
          RESOLVER_FAIL_ON_STUB_ERROR: "0"
        run: |
          set -euxo pipefail
          python resolver/ingestion/run_all_stubs.py

      - name: Upload ingestion logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ingestion-logs-${{ github.run_id }}
          path: |
            resolver/logs/ingestion/**
            !resolver/logs/ingestion/**/.gitkeep

      - name: Export facts
        shell: bash
        run: |
          set -euxo pipefail
          python resolver/tools/export_facts.py --in resolver/staging --out resolver/exports

      - name: Validate facts
        shell: bash
        run: |
          set -euxo pipefail
          python resolver/tools/validate_facts.py --facts resolver/exports/facts.csv

      - name: Freeze snapshot
        shell: bash
        run: |
          set -euxo pipefail
          python resolver/tools/freeze_snapshot.py --facts resolver/exports/facts.csv --month $(date -u +%Y-%m)

      - name: Gate schedule (optional)
        id: schedule_gate
        shell: bash
        run: |
          set -e
          ls -la resolver/tools || true
          if [ -f "resolver/tools/schedule_gate.py" ]; then
            python resolver/tools/schedule_gate.py > gate.json
            echo "GATE RESULT:"
            cat gate.json
            ISTANBUL_TODAY=$(python -c "import json;print(json.load(open('gate.json'))['istanbul_today'])")
            IS_LAST=$(python -c "import json;print('true' if json.load(open('gate.json'))['is_last_day_istanbul'] else 'false')")
            YM=$(python -c "import json;print(json.load(open('gate.json'))['istanbul_today'][:7])")
            echo "istanbul_today=$ISTANBUL_TODAY" >> "$GITHUB_OUTPUT"
            echo "is_last=$IS_LAST" >> "$GITHUB_OUTPUT"
            echo "ym=$YM" >> "$GITHUB_OUTPUT"
          else
            echo "::warning title=Schedule Gate Missing::resolver/tools/schedule_gate.py not found. Skipping gate."
            echo "istanbul_today=" >> "$GITHUB_OUTPUT"
            echo "is_last=false" >> "$GITHUB_OUTPUT"
            echo "ym=" >> "$GITHUB_OUTPUT"
          fi

      - name: Precedence at Istanbul date
        shell: bash
        env:
          ISTANBUL_TODAY: ${{ steps.schedule_gate.outputs.istanbul_today }}
        run: |
          CUT="$ISTANBUL_TODAY"
          if [ -z "$CUT" ]; then
            CUT=$(date -u +%Y-%m-%d)
            echo "::notice title=Schedule Gate Skipped::Using UTC date $CUT as cutoff"
          fi
          python resolver/tools/precedence_engine.py --facts resolver/exports/facts.csv --cutoff "$CUT"

      - name: Build review queue
        shell: bash
        run: |
          set -euxo pipefail
          python resolver/review/make_review_queue.py

      - name: Check artifact and repo sizes
        shell: bash
        run: |
          set -euxo pipefail
          python resolver/tools/check_sizes.py
        env:
          RESOLVER_LIMIT_PARQUET_MB: "150"
          RESOLVER_LIMIT_CSV_MB: "25"
          RESOLVER_LIMIT_REPO_MB: "2000"

      - name: Run data-contract tests (pytest)
        shell: bash
        run: |
          set -euxo pipefail
          pytest resolver/tests -q

      - name: Upload resolver artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: resolver-nightly-${{ github.run_id }}
          path: |
            resolver/staging/*
            resolver/exports/*
            resolver/snapshots/**
          if-no-files-found: warn

      - name: Freeze monthly snapshot
        if: steps.schedule_gate.outputs.is_last == 'true'
        shell: bash
        env:
          SNAPSHOT_MONTH: ${{ steps.schedule_gate.outputs.ym }}
        run: |
          python resolver/tools/freeze_snapshot.py --facts resolver/exports/facts.csv --month "$SNAPSHOT_MONTH" --overwrite

