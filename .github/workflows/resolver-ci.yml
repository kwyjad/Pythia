name: resolver-ci

on:
  pull_request:
    paths:
      - "resolver/**"
      - ".github/workflows/resolver-ci.yml"
  workflow_dispatch: {}
  schedule:
    # Daily at 20:10 UTC â‰ˆ 23:10 Europe/Istanbul (UTC+3)
    - cron: "10 20 * * *"

permissions:
  contents: write

concurrency:
  group: resolver-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pr_check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            resolver/requirements.txt
            resolver/requirements-dev.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r resolver/requirements-dev.txt

      - name: Run ingestion (real connectors only)
        env:
          PYTHONPATH: ${{ github.workspace }}
          RESOLVER_DEBUG: "1"
          RESOLVER_MAX_PAGES: "5"
          RESOLVER_MAX_RESULTS: "1000"
          RESOLVER_INGESTION_MODE: real
          RESOLVER_FAIL_ON_STUB_ERROR: "0"
          WFP_MVAM_ALLOW_PERCENT: "1"
          WFP_MVAM_DENOMINATOR_FILE: "resolver/data/population.csv"
          WORLDPOP_PRODUCT: "un_adj_unconstrained"
        run: |
          python resolver/ingestion/run_all_stubs.py

      - name: Run stubs (non-blocking)
        if: ${{ always() }}
        env:
          PYTHONPATH: ${{ github.workspace }}
          RESOLVER_INGESTION_MODE: stubs
          RESOLVER_FAIL_ON_STUB_ERROR: "0"
        run: |
          python resolver/ingestion/run_all_stubs.py || true

      - name: Export facts
        run: |
          python resolver/tools/export_facts.py --in resolver/staging --out resolver/exports

      - name: Validate facts
        run: |
          python resolver/tools/validate_facts.py --facts resolver/exports/facts.csv

      - name: Precedence at provisional cutoff (last day of current month UTC)
        shell: bash
        run: |
          LAST_UTC=$(date -u -d "$(date -u +%Y-%m-01) +1 month -1 day" +%Y-%m-%d)
          python resolver/tools/precedence_engine.py --facts resolver/exports/facts.csv --cutoff "$LAST_UTC"

      - name: Build review queue
        run: |
          python resolver/review/make_review_queue.py

      - name: Check artifact and repo sizes
        run: |
          python resolver/tools/check_sizes.py
        env:
          RESOLVER_LIMIT_PARQUET_MB: "150"
          RESOLVER_LIMIT_CSV_MB: "25"
          RESOLVER_LIMIT_REPO_MB: "2000"

      - name: Run data-contract tests (pytest)
        run: |
          pytest resolver/tests -q

      - name: Stage repo state for this PR
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          python resolver/tools/write_repo_state.py --mode pr --id "$PR_NUMBER"

  nightly_state:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            resolver/requirements.txt
            resolver/requirements-dev.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r resolver/requirements-dev.txt

      - name: Run ingestion (real connectors only)
        env:
          PYTHONPATH: ${{ github.workspace }}
          RESOLVER_DEBUG: "1"
          RESOLVER_MAX_PAGES: "5"
          RESOLVER_MAX_RESULTS: "1000"
          RESOLVER_INGESTION_MODE: real
          RESOLVER_FAIL_ON_STUB_ERROR: "0"
          WFP_MVAM_ALLOW_PERCENT: "1"
          WFP_MVAM_DENOMINATOR_FILE: "resolver/data/population.csv"
          WORLDPOP_PRODUCT: "un_adj_unconstrained"
        run: |
          python resolver/ingestion/run_all_stubs.py

      - name: Run stubs (non-blocking)
        if: ${{ always() }}
        env:
          PYTHONPATH: ${{ github.workspace }}
          RESOLVER_INGESTION_MODE: stubs
          RESOLVER_FAIL_ON_STUB_ERROR: "0"
        run: |
          python resolver/ingestion/run_all_stubs.py || true

      - name: Export facts
        run: |
          python resolver/tools/export_facts.py --in resolver/staging --out resolver/exports

      - name: Validate facts
        run: |
          python resolver/tools/validate_facts.py --facts resolver/exports/facts.csv

      - name: Gate schedule (optional)
        id: schedule_gate
        shell: bash
        run: |
          set -e
          ls -la resolver/tools || true
          if [ -f "resolver/tools/schedule_gate.py" ]; then
            python resolver/tools/schedule_gate.py > gate.json
            echo "GATE RESULT:"
            cat gate.json
            ISTANBUL_TODAY=$(python -c "import json;print(json.load(open('gate.json'))['istanbul_today'])")
            IS_LAST=$(python -c "import json;print('true' if json.load(open('gate.json'))['is_last_day_istanbul'] else 'false')")
            YM=$(python -c "import json;print(json.load(open('gate.json'))['istanbul_today'][:7])")
            echo "istanbul_today=$ISTANBUL_TODAY" >> "$GITHUB_OUTPUT"
            echo "is_last=$IS_LAST" >> "$GITHUB_OUTPUT"
            echo "ym=$YM" >> "$GITHUB_OUTPUT"
          else
            echo "::warning title=Schedule Gate Missing::resolver/tools/schedule_gate.py not found. Skipping gate."
            echo "istanbul_today=" >> "$GITHUB_OUTPUT"
            echo "is_last=false" >> "$GITHUB_OUTPUT"
            echo "ym=" >> "$GITHUB_OUTPUT"
          fi

      - name: Precedence at Istanbul date
        shell: bash
        env:
          ISTANBUL_TODAY: ${{ steps.schedule_gate.outputs.istanbul_today }}
        run: |
          CUT="$ISTANBUL_TODAY"
          if [ -z "$CUT" ]; then
            CUT=$(date -u +%Y-%m-%d)
            echo "::notice title=Schedule Gate Skipped::Using UTC date $CUT as cutoff"
          fi
          python resolver/tools/precedence_engine.py --facts resolver/exports/facts.csv --cutoff "$CUT"

      - name: Build review queue
        run: |
          python resolver/review/make_review_queue.py

      - name: Check artifact and repo sizes
        run: |
          python resolver/tools/check_sizes.py
        env:
          RESOLVER_LIMIT_PARQUET_MB: "150"
          RESOLVER_LIMIT_CSV_MB: "25"
          RESOLVER_LIMIT_REPO_MB: "2000"

      - name: Run data-contract tests (pytest)
        run: |
          pytest resolver/tests -q

      - name: Freeze monthly snapshot
        if: steps.schedule_gate.outputs.is_last == 'true'
        shell: bash
        env:
          SNAPSHOT_MONTH: ${{ steps.schedule_gate.outputs.ym }}
        run: |
          python resolver/tools/freeze_snapshot.py --facts resolver/exports/facts.csv --month "$SNAPSHOT_MONTH" --overwrite

      - name: Stage repo state for nightly
        shell: bash
        run: |
          D=$(date -u +%Y-%m-%d)
          python resolver/tools/write_repo_state.py --mode daily --id "$D"

      - name: Commit nightly state
        shell: bash
        env:
          YM: ${{ steps.schedule_gate.outputs.ym }}
        run: |
          set -e
          echo "DID_COMMIT=false" >> "$GITHUB_ENV"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add resolver/exports/*.csv 2>/dev/null || true
          git add resolver/exports/*.jsonl 2>/dev/null || true
          git add resolver/exports/*.parquet 2>/dev/null || true
          git add resolver/exports/*diagnostics*.csv 2>/dev/null || true
          git add resolver/state/daily/*/exports/*.csv 2>/dev/null || true
          git add resolver/state/daily/*/exports/*.jsonl 2>/dev/null || true
          git add resolver/state/daily/*/review/review_queue.csv 2>/dev/null || true

          if [ -n "$YM" ]; then
            git add resolver/snapshots/"$YM"/facts.parquet 2>/dev/null || true
            git add resolver/snapshots/"$YM"/manifest.json 2>/dev/null || true
          fi

          if ! git diff --cached --quiet; then
            MSG="chore(resolver): nightly state"
            if [ -n "$YM" ]; then MSG="$MSG + snapshot $YM"; fi
            git commit -m "$MSG [skip ci]"
            echo "DID_COMMIT=true" >> "$GITHUB_ENV"
          else
            echo "No changes to commit."
          fi

      - name: Push nightly state
        if: env.DID_COMMIT == 'true'
        shell: bash
        run: |
          set -e
          if git log -1 --pretty=%B | grep -q "nightly state"; then
            BRANCH="${GITHUB_REF#refs/heads/}"
            if [ -z "$BRANCH" ]; then
              echo "::error ::Could not resolve branch from $GITHUB_REF"
              exit 1
            fi
            git push origin "HEAD:refs/heads/${BRANCH}"
            echo "Pushed to ${BRANCH}"
          else
            echo "Latest commit is not a nightly state commit. Skipping push."
          fi
