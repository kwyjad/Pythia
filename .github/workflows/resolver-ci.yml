name: resolver-ci

on:
  schedule:
    - cron: "17 2 * * *"
  workflow_dispatch:

jobs:
  db_backend_nocache:
    name: "tests (db backend, cache disabled, duckdb=${{ matrix.duckdb_spec }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        duckdb_spec: ["0_10_x", "latest"]
    env:
      duckdb_label: ${{ matrix.duckdb_spec }}
      RESOLVER_CACHE: "0"
      RESOLVER_DIAG: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Prepare CI dir
        run: |
          set -o pipefail
          mkdir -p "${{ github.workspace }}/.ci"

      - name: Install dependencies (incl. DuckDB)
        run: |
          set -o pipefail
          python -m pip install --upgrade pip setuptools wheel
          if ! python -m pip install -e ".[db,test]"; then
            python -m pip install -e .
          fi
          python -m pip install duckdb pytest

      - name: Verify DuckDB import
        run: |
          python - <<'PY'
          import duckdb
          print("âœ… duckdb", getattr(duckdb, "__version__", "unknown"))
          PY

      - name: Run tests
        id: tests
        continue-on-error: true
        env:
          RESOLVER_DB_URL: "duckdb:///${{ github.workspace }}/.ci/db-nocache-${{ env.duckdb_label }}.duckdb"
        run: |
          set -o pipefail
          python -m pytest -q resolver/tests --maxfail=1 --disable-warnings --junitxml=pytest-junit.xml

      - name: Package diagnostics
        if: always()
        env:
          JOB_NAME: ${{ github.job }}
          DUCKDB_LABEL: ${{ env.duckdb_label }}
        run: |
          bash scripts/ci/package_diagnostics.sh

      - name: Upload diagnostics bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-${{ github.job }}-${{ env.duckdb_label }}
          path: |
            diagnostics_*.tar.gz
            .ci/diagnostics/**
          if-no-files-found: warn

      - name: Respect test result
        if: ${{ always() && steps.tests.outcome == 'failure' }}
        run: exit 1
