name: resolver-ci-fast

on:
  push:
    branches: ['**']
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/**'
  pull_request:
    branches: ['**']
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  fast_tests:
    name: fast-tests (duckdb=${{ matrix.duckdb_spec }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        duckdb_spec: ['0_10_x', 'latest']
    env:
      PYTHONDONTWRITEBYTECODE: '1'
      TZ: UTC
    steps:
      - uses: actions/checkout@v4

      - name: Prepare workspace cache dir
        run: mkdir -p "${{ github.workspace }}/.ci"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install workspace (editable)
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip uninstall -y resolver || true
          pip install -e .[db,test]
          if [ "${{ matrix.duckdb_spec }}" = '0_10_x' ]; then
            python -m pip install 'duckdb==0.10.*'
          else
            python -m pip install duckdb
          fi
          python -m pip install pytest

      - name: Run fast tests
        run: |
          set -o pipefail
          export RESOLVER_DB_URL="duckdb:///${{ github.workspace }}/.ci/fast-${{ matrix.duckdb_spec }}.duckdb"
          python -m pytest -q resolver/tests -k "not slow and not nightly" \
            --maxfail=1 --disable-warnings --junitxml=pytest-junit.xml 2>&1 | tee pytest-stdout.txt
          exit ${PIPESTATUS[0]}

      - name: Build diagnostics bundle (per-matrix)
        if: always()
        run: |
          export RESOLVER_DB_URL="duckdb:///${{ github.workspace }}/.ci/fast-${{ matrix.duckdb_spec }}.duckdb"
          python -m resolver.tools.ci_diag_bundle \
            --suite "fast-tests" \
            --duckdb-version "$(python - <<'PY'
import duckdb
print(getattr(duckdb, '__version__', 'unknown'))
PY
)" \
            --db-url "$RESOLVER_DB_URL" \
            --scan-path "${{ github.workspace }}/.ci" \
            --scan-path "${{ github.workspace }}" \
            --scan-path "/tmp/pytest-of-runner" \
            --scan-path "/tmp" \
            --pytest-stdout pytest-stdout.txt \
            --out "diagnostics.fast-${{ matrix.duckdb_spec }}.zip"

      - name: Upload diagnostics (per-matrix)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fast-tests-part-${{ matrix.duckdb_spec }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: diagnostics.fast-${{ matrix.duckdb_spec }}.zip
          overwrite: true

  db_backend:
    name: db-backend (duckdb=${{ matrix.duckdb_spec }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        duckdb_spec: ['0_10_x', 'latest']
    env:
      PYTHONDONTWRITEBYTECODE: '1'
      TZ: UTC
      RESOLVER_API_BACKEND: db
    steps:
      - uses: actions/checkout@v4

      - name: Prepare workspace cache dir
        run: mkdir -p "${{ github.workspace }}/.ci"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install workspace (editable)
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip uninstall -y resolver || true
          pip install -e .[db,test]
          if [ "${{ matrix.duckdb_spec }}" = '0_10_x' ]; then
            python -m pip install 'duckdb==0.10.*'
          else
            python -m pip install duckdb
          fi
          python -m pip install pytest

      - name: Run db-backend tests
        run: |
          set -o pipefail
          export RESOLVER_DB_URL="duckdb:///${{ github.workspace }}/.ci/db-${{ matrix.duckdb_spec }}.duckdb"
          python -m pytest -q resolver/tests \
            --maxfail=1 --disable-warnings --junitxml=pytest-junit.xml 2>&1 | tee pytest-stdout.txt
          exit ${PIPESTATUS[0]}

      - name: Build diagnostics bundle (per-matrix)
        if: always()
        run: |
          export RESOLVER_DB_URL="duckdb:///${{ github.workspace }}/.ci/db-${{ matrix.duckdb_spec }}.duckdb"
          python -m resolver.tools.ci_diag_bundle \
            --suite "db-backend" \
            --duckdb-version "$(python - <<'PY'
import duckdb
print(getattr(duckdb, '__version__', 'unknown'))
PY
)" \
            --db-url "$RESOLVER_DB_URL" \
            --scan-path "${{ github.workspace }}/.ci" \
            --scan-path "${{ github.workspace }}" \
            --scan-path "/tmp/pytest-of-runner" \
            --scan-path "/tmp" \
            --pytest-stdout pytest-stdout.txt \
            --out "diagnostics.db-${{ matrix.duckdb_spec }}.zip"

      - name: Upload diagnostics (per-matrix)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: db-backend-part-${{ matrix.duckdb_spec }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: diagnostics.db-${{ matrix.duckdb_spec }}.zip
          overwrite: true

  connector_smoke:
    name: offline-connector-smoke (duckdb=${{ matrix.duckdb_spec }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        duckdb_spec: ['0_10_x', 'latest']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install workspace (editable)
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip uninstall -y resolver || true
          pip install -e .[db,test]
          if [ "${{ matrix.duckdb_spec }}" = '0_10_x' ]; then
            python -m pip install 'duckdb==0.10.*'
          else
            python -m pip install duckdb
          fi
          python -m pip install pytest

      - name: Run smoke
        run: |
          python -m pytest -q resolver/tests/test_ingestion_smoke_all_connectors.py \
            -k "offline" --maxfail=1 --disable-warnings --junitxml=pytest-junit.xml

  aggregate:
    name: CI aggregate (fast-tests + db-backend)
    runs-on: ubuntu-latest
    needs: [fast_tests, db_backend]
    if: ${{ always() }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./downloads

      - name: Consolidate artifacts and SUMMARY.md
        run: |
          export RUN_ID="${{ github.run_id }}"
          export RUN_ATTEMPT="${{ github.run_attempt }}"
          python - <<'PY'
import os
import pathlib
import zipfile

run_id = os.environ.get('RUN_ID', 'unknown')
run_attempt = os.environ.get('RUN_ATTEMPT', '1')
root = pathlib.Path('downloads')
part_zips = sorted(root.glob('**/*.zip'))
out_name = f"diagnostics-consolidated-{run_id}-{run_attempt}.zip"
with zipfile.ZipFile(out_name, 'w', zipfile.ZIP_DEFLATED) as z:
    summaries: list[str] = []
    for part in part_zips:
        z.write(part, f"parts/{part.name}")
        try:
            with zipfile.ZipFile(part, 'r') as partz:
                candidates = [n for n in partz.namelist() if n.endswith('diagnostics/SUMMARY.md')]
                if candidates:
                    text = partz.read(candidates[0]).decode('utf-8', 'ignore')
                    summaries.append(f"\n\n---\n# From: {part.name}\n\n{text}")
        except zipfile.BadZipFile:
            continue
    master = ["# Resolver â€” Consolidated SUMMARY", "", f"Run: {run_id} attempt {run_attempt}"]
    if summaries:
        master.extend(summaries)
    else:
        master.append("\n(No per-part summaries found)")
    z.writestr('SUMMARY.md', "\n".join(master) + "\n")
print(f"Wrote {out_name}")
PY

      - name: Upload consolidated diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-consolidated-${{ github.run_id }}-${{ github.run_attempt }}
          path: diagnostics-consolidated-${{ github.run_id }}-${{ github.run_attempt }}.zip
          overwrite: true
