name: resolver-ci-fast

on:
  push:
    branches: ['**']
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/**'
  pull_request:
    branches: ['**']
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/**'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  fast-tests:
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]') }}
    name: fast-tests (duckdb=${{ matrix.duckdb_label }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - duckdb_spec: "duckdb==0.10.*"
            duckdb_label: "0_10"
          - duckdb_spec: "duckdb"
            duckdb_label: "latest"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PYTHONDONTWRITEBYTECODE: 1
      TZ: Europe/Istanbul
      RESOLVER_DUCKDB_DISABLE_MERGE: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug repo context
        run: |
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_SHA=$GITHUB_SHA"
          python -c "import pathlib; p = pathlib.Path().resolve(); print('CWD:', p); print('Tree:', len(list(p.glob('**/*'))))"

      - name: "Anti-drift: assert no legacy repo references"
        run: |
          part_a="spa"
          part_b="gbot"
          script_path="scripts/ci/assert_no_${part_a}${part_b}_refs.sh"
          chmod +x "$script_path"
          "$script_path"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Confirm Pythia root
        run: ls -la && test -f pyproject.toml

      - name: Install dependencies (project + db + tests)
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -e .[db,test]

      - name: Install DuckDB (ensure available for tests)
        run: |
          python -m pip install --upgrade pip
          python -m pip install "${{ matrix.duckdb_spec }}"

      - name: Verify DuckDB presence
        run: |
          python - <<'PY'
          import importlib.util, sys
          spec = importlib.util.find_spec("duckdb")
          if spec is None:
              print("❌ DuckDB not installed — cannot run DB parity tests.")
              sys.exit(1)
          import duckdb
          print("✅ DuckDB installed:", duckdb.__version__)
          PY

      - name: Show resolver import location & DuckDB version
        run: |
          python - <<'PY'
          import sys, pathlib, resolver, duckdb
          print("Python executable:", sys.executable)
          print("resolver module path:", pathlib.Path(resolver.__file__).resolve())
          print("duckdb version:", getattr(duckdb, "__version__", "n/a"))
          PY

      - name: Run fast tests
        run: |
          python -m pytest -q resolver/tests -k "not slow and not nightly" --maxfail=1 --disable-warnings --junitxml=pytest-junit.xml

      - name: Upload test results (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fast-pytest-results
          path: pytest-junit.xml

      - name: Upload debug artifacts on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: fast-tests-diagnostics-${{ matrix.duckdb_label }}-${{ github.run_attempt }}
          path: |
            **/*.duckdb
            pytest-junit.xml
            ./**/resolver_debug.log
          if-no-files-found: ignore
          overwrite: true

  db_tests:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    name: db-tests (duckdb=${{ matrix.duckdb_label }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - duckdb_spec: "duckdb==0.10.*"
            duckdb_label: "0_10"
          - duckdb_spec: "duckdb"
            duckdb_label: "latest"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      RESOLVER_DUCKDB_DISABLE_MERGE: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug repo context
        run: |
          echo "Repo=$GITHUB_REPOSITORY Ref=$GITHUB_REF SHA=$GITHUB_SHA"
          python -c "import pathlib; print('CWD=', pathlib.Path().resolve())"

      - name: Check DB tests present
        id: dbfiles
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "resolver/tests/test_db_parity.py" ] || [ -f "resolver/tests/test_duckdb_idempotency.py" ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
            echo "Found DB tests."
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
            echo "No DB tests found; will skip DB test steps."
          fi

      - name: Setup Python
        if: steps.dbfiles.outputs.present == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies (project + db + tests)
        if: steps.dbfiles.outputs.present == 'true'
        env:
          PIP_NO_CACHE_DIR: "1"
          PIP_DEFAULT_TIMEOUT: "60"
          PIP_INDEX_URL: ${{ secrets.PIP_INDEX_URL }}
          PIP_EXTRA_INDEX_URL: ${{ secrets.PIP_EXTRA_INDEX_URL }}
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel setuptools
          pip install -e .[db,test]

      - name: Install DuckDB (ensure available for tests)
        if: steps.dbfiles.outputs.present == 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install "${{ matrix.duckdb_spec }}"

      - name: Verify DuckDB is installed
        if: steps.dbfiles.outputs.present == 'true'
        run: |
          python - <<'PY'
          import importlib.util, sys
          spec = importlib.util.find_spec("duckdb")
          if spec is None:
              print("duckdb NOT installed")
              sys.exit(1)
          import duckdb
          print("duckdb", duckdb.__version__)
          PY

      - name: Show resolver import location & DuckDB version
        if: steps.dbfiles.outputs.present == 'true'
        run: |
          python - <<'PY'
          import sys, pathlib, resolver, duckdb
          print("Python executable:", sys.executable)
          print("resolver module path:", pathlib.Path(resolver.__file__).resolve())
          print("duckdb version:", getattr(duckdb, "__version__", "n/a"))
          PY

      - name: Run DuckDB tests
        if: steps.dbfiles.outputs.present == 'true'
        env:
          RESOLVER_DB_URL: duckdb:///${{ runner.temp }}/resolver.ci.duckdb
        run: python -m pytest -q resolver/tests/test_db_parity.py resolver/tests/test_duckdb_idempotency.py

      - name: Upload debug artifacts on failure
        if: ${{ failure() && steps.dbfiles.outputs.present == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: db-tests-diagnostics-${{ matrix.duckdb_label }}-${{ github.run_attempt }}
          path: |
            **/*.duckdb
            pytest-junit.xml
            ./**/resolver_debug.log
          if-no-files-found: ignore
          overwrite: true

      - name: Skip DB tests (not present)
        if: steps.dbfiles.outputs.present != 'true'
        run: echo "::notice ::Skipping DB tests (files not present in this repo/branch)."

  db_tests_nocache:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    needs: db_tests
    name: db-tests-nocache (duckdb=${{ matrix.duckdb_label }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - duckdb_spec: "duckdb==0.10.*"
            duckdb_label: "0_10"
          - duckdb_spec: "duckdb"
            duckdb_label: "latest"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      RESOLVER_DUCKDB_DISABLE_MERGE: "1"
      RESOLVER_DISABLE_CONN_CACHE: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug repo context
        run: |
          echo "Repo=$GITHUB_REPOSITORY Ref=$GITHUB_REF SHA=$GITHUB_SHA (nocache)"
          python -c "import pathlib; print('CWD=', pathlib.Path().resolve())"

      - name: Check DB tests present
        id: dbfiles
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "resolver/tests/test_db_parity.py" ] || [ -f "resolver/tests/test_duckdb_idempotency.py" ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
            echo "Found DB tests."
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
            echo "No DB tests found; will skip DB test steps."
          fi

      - name: Setup Python
        if: steps.dbfiles.outputs.present == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies (project + db + tests)
        if: steps.dbfiles.outputs.present == 'true'
        env:
          PIP_NO_CACHE_DIR: "1"
          PIP_DEFAULT_TIMEOUT: "60"
          PIP_INDEX_URL: ${{ secrets.PIP_INDEX_URL }}
          PIP_EXTRA_INDEX_URL: ${{ secrets.PIP_EXTRA_INDEX_URL }}
          HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
          HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip wheel setuptools
          pip install -e .[db,test]

      - name: Install DuckDB (ensure available for tests)
        if: steps.dbfiles.outputs.present == 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install "${{ matrix.duckdb_spec }}"

      - name: Verify DuckDB is installed
        if: steps.dbfiles.outputs.present == 'true'
        run: |
          python - <<'PY'
          import importlib.util, sys
          spec = importlib.util.find_spec("duckdb")
          if spec is None:
              print("duckdb NOT installed")
              sys.exit(1)
          import duckdb
          print("duckdb", duckdb.__version__)
          PY

      - name: Show resolver import location & DuckDB version
        if: steps.dbfiles.outputs.present == 'true'
        run: |
          python - <<'PY'
          import sys, pathlib, resolver, duckdb
          print("Python executable:", sys.executable)
          print("resolver module path:", pathlib.Path(resolver.__file__).resolve())
          print("duckdb version:", getattr(duckdb, "__version__", "n/a"))
          PY

      - name: Run DuckDB tests (cache disabled)
        if: steps.dbfiles.outputs.present == 'true'
        env:
          RESOLVER_DB_URL: duckdb:///${{ runner.temp }}/resolver.ci.duckdb
        run: python -m pytest -q resolver/tests/test_db_parity.py resolver/tests/test_duckdb_idempotency.py

      - name: Upload debug artifacts on failure
        if: ${{ failure() && steps.dbfiles.outputs.present == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: db-tests-nocache-diagnostics-${{ matrix.duckdb_label }}-${{ github.run_attempt }}
          path: |
            **/*.duckdb
            pytest-junit.xml
            ./**/resolver_debug.log
          if-no-files-found: ignore
          overwrite: true

      - name: Skip DB tests (not present)
        if: steps.dbfiles.outputs.present != 'true'
        run: echo "::notice ::Skipping DB tests (files not present in this repo/branch)."
