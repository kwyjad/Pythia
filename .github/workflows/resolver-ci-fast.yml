name: resolver-ci-fast

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  fast_tests:
    name: fast-tests (duckdb=${{ matrix.duckdb_spec }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        duckdb_spec: [ "0_10_x", "latest" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare CI dir
        run: mkdir -p "${{ github.workspace }}/.ci"

      - name: Install workspace (editable)
        run: |
          python -m pip install --upgrade pip
          pip uninstall -y resolver || true
          pip install -e .
          pip install pytest

      - name: Run fast tests
        run: |
          set -o pipefail
          export RESOLVER_DB_URL="duckdb:///${{ github.workspace }}/.ci/fast-${{ matrix.duckdb_spec }}.duckdb"
          python -m pytest -q resolver/tests -k "not slow and not nightly" \
            --maxfail=1 --disable-warnings --junitxml=pytest-junit.xml 2>&1 | tee pytest-stdout.txt
          exit ${PIPESTATUS[0]}

      - name: Build diagnostics bundle (per-matrix)
        run: |
          python - <<'PY'
import duckdb, sys
print(getattr(duckdb,'__version__','unknown'))
PY
        shell: bash

      - name: Build diagnostics bundle (per-matrix) actual
        run: |
          python -m resolver.tools.ci_diag_bundle \
            --suite "fast-tests" \
            --duckdb-version "$(python - <<'PY'
import duckdb; print(getattr(duckdb,'__version__','unknown'))
PY
)" \
            --db-url "duckdb:///${{ github.workspace }}/.ci/fast-${{ matrix.duckdb_spec }}.duckdb" \
            --scan-path "${{ github.workspace }}/.ci" \
            --scan-path "${{ github.workspace }}" \
            --scan-path "/tmp/pytest-of-runner" \
            --scan-path "/tmp" \
            --pytest-stdout pytest-stdout.txt \
            --out "diagnostics.fast-${{ matrix.duckdb_spec }}.zip"

      - name: Upload diagnostics (per-matrix)
        uses: actions/upload-artifact@v4
        with:
          name: fast-tests-part-${{ matrix.duckdb_spec }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: diagnostics.fast-${{ matrix.duckdb_spec }}.zip
          overwrite: true

  db_backend:
    name: db-backend (duckdb=${{ matrix.duckdb_spec }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        duckdb_spec: [ "0_10_x", "latest" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare CI dir
        run: mkdir -p "${{ github.workspace }}/.ci"

      - name: Install workspace (editable)
        run: |
          python -m pip install --upgrade pip
          pip uninstall -y resolver || true
          pip install -e .
          pip install pytest

      - name: Run db-backend tests
        run: |
          set -o pipefail
          export RESOLVER_DB_URL="duckdb:///${{ github.workspace }}/.ci/db-${{ matrix.duckdb_spec }}.duckdb"
          python -m pytest -q resolver/tests \
            --maxfail=1 --disable-warnings --junitxml=pytest-junit.xml 2>&1 | tee pytest-stdout.txt
          exit ${PIPESTATUS[0]}

      - name: Build diagnostics bundle (per-matrix)
        run: |
          python -m resolver.tools.ci_diag_bundle \
            --suite "db-backend" \
            --duckdb-version "$(python - <<'PY'
import duckdb; print(getattr(duckdb,'__version__','unknown'))
PY
)" \
            --db-url "duckdb:///${{ github.workspace }}/.ci/db-${{ matrix.duckdb_spec }}.duckdb" \
            --scan-path "${{ github.workspace }}/.ci" \
            --scan-path "${{ github.workspace }}" \
            --scan-path "/tmp/pytest-of-runner" \
            --scan-path "/tmp" \
            --pytest-stdout pytest-stdout.txt \
            --out "diagnostics.db-${{ matrix.duckdb_spec }}.zip"

      - name: Upload diagnostics (per-matrix)
        uses: actions/upload-artifact@v4
        with:
          name: db-backend-part-${{ matrix.duckdb_spec }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: diagnostics.db-${{ matrix.duckdb_spec }}.zip
          overwrite: true

  connector_smoke:
    name: offline-connector-smoke (duckdb=${{ matrix.duckdb_spec }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        duckdb_spec: [ "0_10_x", "latest" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install workspace (editable)
        run: |
          python -m pip install --upgrade pip
          pip uninstall -y resolver || true
          pip install -e .
          pip install pytest
      - name: Run smoke
        run: |
          python -m pytest -q resolver/tests/test_ingestion_smoke_all_connectors.py \
            -k "offline" --maxfail=1 --disable-warnings --junitxml=pytest-junit.xml

  aggregate:
    name: CI aggregate (fast-tests + db-backend)
    runs-on: ubuntu-latest
    needs: [fast_tests, db_backend]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./downloads
      - name: Consolidate artifacts and SUMMARY.md
        run: |
          python - <<'PY'
import os, zipfile, pathlib
root = pathlib.Path("downloads")
part_zips = sorted(root.glob("**/*.zip"))
outzip = pathlib.Path("diagnostics-consolidated-${{ github.run_id }}-${{ github.run_attempt }}.zip")
with zipfile.ZipFile(outzip, "w", zipfile.ZIP_DEFLATED) as z:
    summaries = []
    for p in part_zips:
        z.write(p, f"parts/{p.name}")
        with zipfile.ZipFile(p, "r") as partz:
            cand = [n for n in partz.namelist() if n.endswith("diagnostics/SUMMARY.md")]
            if cand:
                text = partz.read(cand[0]).decode("utf-8","ignore")
                summaries.append(f"\n\n---\n# From: {p.name}\n\n{text}")
    master = "# Resolver â€” Consolidated SUMMARY\n"
    master += f"\nRun: ${{ github.run_id }} attempt ${{ github.run_attempt }}\n"
    master += "\n".join(summaries) if summaries else "\n(No per-part summaries found)"
    z.writestr("SUMMARY.md", master)
print("Wrote", outzip)
PY
      - name: Upload consolidated diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-consolidated-${{ github.run_id }}-${{ github.run_attempt }}
          path: diagnostics-consolidated-${{ github.run_id }}-${{ github.run_attempt }}.zip
          overwrite: true
