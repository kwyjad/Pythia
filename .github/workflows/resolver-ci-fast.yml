name: resolver-ci-fast

on:
  push:
    branches: ['**']
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/**'
  pull_request:
    branches: ['**']
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/**'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  fast_tests:
    name: fast-tests (duckdb=${{ matrix.duckdb_label }})
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - duckdb_spec: 'duckdb==0.10.*'
            duckdb_label: '0_10_x'
          - duckdb_spec: 'duckdb'
            duckdb_label: 'latest'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PYTHONDONTWRITEBYTECODE: 1
      TZ: UTC
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install workspace (editable) and deps
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip uninstall -y resolver || true
          pip install -e .
          pip install pytest junit-xml
          python -m pip install "${{ matrix.duckdb_spec }}"

      - name: Print commit & module stamps
        run: |
          git rev-parse HEAD
          python - <<'PY'
          import hashlib, inspect, pathlib, sys
          import duckdb, resolver
          import resolver.db.duckdb_io as duckdb_io

          print('Python executable:', sys.executable)
          print('Python version:', sys.version)
          resolver_path = pathlib.Path(resolver.__file__).resolve()
          duckdb_io_path = pathlib.Path(inspect.getfile(duckdb_io)).resolve()
          print('resolver module path:', resolver_path)
          print('duckdb_io.py path:', duckdb_io_path)
          print('duckdb_io.py sha256:', hashlib.sha256(duckdb_io_path.read_bytes()).hexdigest())
          print('duckdb version:', getattr(duckdb, '__version__', 'unknown'))
          PY

      - name: Run fast tests
        run: |
          python -m pytest -q resolver/tests -k "not slow and not nightly" \
            --maxfail=1 --disable-warnings --junitxml=pytest-junit.xml

      - name: Build diagnostics bundle (per-job)
        if: always()
        run: |
          python -m resolver.tools.ci_diag_bundle \
            --suite "fast-tests" \
            --duckdb-version "$(python -c "import duckdb; print(getattr(duckdb, '__version__', 'unknown'))")" \
            --db-url "${{ env.RESOLVER_DB_URL || '' }}" \
            --out "diagnostics.${{ matrix.duckdb_label }}.zip"

      - name: Upload diagnostics (per-job)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fast-tests-part-${{ matrix.duckdb_label }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: diagnostics.${{ matrix.duckdb_label }}.zip
          overwrite: true

  fast_tests_aggregate:
    name: fast-tests aggregate
    needs: [fast_tests]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Download per-job artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: fast-tests-part-*
          merge-multiple: true
          if-no-artifact: ignore
          path: downloads

      - name: Create consolidated bundle and SUMMARY.md
        run: |
          python - <<'PY'
          import os
          import pathlib
          import zipfile

          downloads = pathlib.Path('downloads')
          zip_paths = sorted(downloads.rglob('*.zip'))
          run_id = os.environ.get('GITHUB_RUN_ID', 'unknown')
          run_attempt = os.environ.get('GITHUB_RUN_ATTEMPT', 'unknown')
          out_path = pathlib.Path(f'diagnostics-fast-tests-{run_id}-{run_attempt}.zip')

          summary_chunks = [
              '# Resolver â€” Fast Tests Summary (consolidated)',
              '',
              f'Run: {run_id} attempt {run_attempt}',
          ]

          if not zip_paths:
              summary_chunks.append('')
              summary_chunks.append('(No per-job diagnostics artifacts were found.)')
          else:
              summary_chunks.append('')
              summary_chunks.append('Collected parts:')
              for path in zip_paths:
                  summary_chunks.append(f'- {path.name}')

          with zipfile.ZipFile(out_path, 'w', zipfile.ZIP_DEFLATED) as archive:
              for path in zip_paths:
                  archive.write(path, f'parts/{path.name}')
                  try:
                      with zipfile.ZipFile(path, 'r') as part_zip:
                          if 'diagnostics/SUMMARY.md' in part_zip.namelist():
                              text = part_zip.read('diagnostics/SUMMARY.md').decode('utf-8', 'ignore').strip()
                              summary_chunks.append('\n---\n')
                              summary_chunks.append(f'# From: {path.name}')
                              summary_chunks.append('')
                              summary_chunks.append(text)
                  except zipfile.BadZipFile:
                      summary_chunks.append('\n---\n')
                      summary_chunks.append(f'# From: {path.name}')
                      summary_chunks.append('')
                      summary_chunks.append('(corrupt zip file)')

              archive.writestr('SUMMARY.md', '\n'.join(summary_chunks) + '\n')

          print(f'Wrote {out_path}')
          PY

      - name: Upload consolidated diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-fast-tests-${{ github.run_id }}-${{ github.run_attempt }}
          path: diagnostics-fast-tests-${{ github.run_id }}-${{ github.run_attempt }}.zip
          overwrite: true
