name: resolver-ci-fast

on:
  push:
    branches: ['**']
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/**'
  pull_request:
    branches: ['**']
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/**'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  fast-tests:
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]') }}
    name: fast-tests (duckdb=${{ matrix.duckdb_label }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - duckdb_spec: "duckdb==0.10.*"
            duckdb_label: "0_10_x"
          - duckdb_spec: "duckdb"
            duckdb_label: "latest"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PYTHONDONTWRITEBYTECODE: 1
      TZ: Europe/Istanbul
      RESOLVER_DUCKDB_DISABLE_MERGE: "1"
      RESOLVER_DIAG: ${{ contains(matrix.duckdb_label, '0_10') && '1' || '0' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show commit context
        run: |
          echo "GITHUB_SHA=${GITHUB_SHA}"
          echo "PR_HEAD_SHA=${{ github.event.pull_request.head.sha || '' }}"
          git rev-parse HEAD
          git show -s --date=iso --format='%H %cd %s'

      - name: "Anti-drift: assert no legacy repo references"
        run: |
          part_a="spa"
          part_b="gbot"
          script_path="scripts/ci/assert_no_${part_a}${part_b}_refs.sh"
          chmod +x "$script_path"
          "$script_path"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install project in editable mode
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip uninstall -y resolver || true
          pip install -e .[db,test]
          python -m pip install "${{ matrix.duckdb_spec }}"

      - name: Print resolver & DuckDB stamps
        run: |
          git rev-parse HEAD
          python - <<'PY'
          import hashlib, inspect, pathlib, sys
          import duckdb, resolver
          import resolver.db.duckdb_io as duckdb_io

          print("Python executable:", sys.executable)
          print("Python version:", sys.version)
          resolver_path = pathlib.Path(resolver.__file__).resolve()
          duckdb_io_path = pathlib.Path(inspect.getfile(duckdb_io)).resolve()
          print("resolver module path:", resolver_path)
          print("duckdb_io.py path:", duckdb_io_path)
          print("duckdb_io.py sha256:", hashlib.sha256(duckdb_io_path.read_bytes()).hexdigest())
          print("duckdb version:", getattr(duckdb, "__version__", "unknown"))
          PY

      - name: Run fast tests
        run: |
          python -m pytest -q resolver/tests -k "not slow and not nightly" --maxfail=1 --disable-warnings --junitxml=pytest-junit.xml

      - name: Build diagnostics bundle
        if: always()
        run: |
          suite="${{ github.job }}-${{ matrix.duckdb_label }}"
          python -m resolver.tools.ci_diag_bundle \
            --out diagnostics.zip \
            --db-url "${{ env.RESOLVER_DB_URL || '' }}" \
            --suite "$suite" \
            --duckdb-version "$(python -c "import duckdb;print(getattr(duckdb,'__version__','unknown'))")"

      - name: Upload diagnostics bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-bundle-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}-${{ matrix.duckdb_label || 'na' }}
          path: diagnostics.zip
          overwrite: true
  db_tests:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    name: db-tests (duckdb=${{ matrix.duckdb_label }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - duckdb_spec: "duckdb==0.10.*"
            duckdb_label: "0_10_x"
          - duckdb_spec: "duckdb"
            duckdb_label: "latest"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      RESOLVER_DUCKDB_DISABLE_MERGE: "1"
      RESOLVER_DIAG: ${{ contains(matrix.duckdb_label, '0_10') && '1' || '0' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show commit context
        run: |
          echo "GITHUB_SHA=${GITHUB_SHA}"
          echo "PR_HEAD_SHA=${{ github.event.pull_request.head.sha || '' }}"
          git rev-parse HEAD
          git show -s --date=iso --format='%H %cd %s'

      - name: "Anti-drift: assert no legacy repo references"
        run: |
          part_a="spa"
          part_b="gbot"
          script_path="scripts/ci/assert_no_${part_a}${part_b}_refs.sh"
          chmod +x "$script_path"
          "$script_path"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install project in editable mode
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip uninstall -y resolver || true
          pip install -e .[db,test]
          python -m pip install "${{ matrix.duckdb_spec }}"

      - name: Print resolver & DuckDB stamps
        run: |
          git rev-parse HEAD
          python - <<'PY'
          import hashlib, inspect, pathlib, sys
          import duckdb, resolver
          import resolver.db.duckdb_io as duckdb_io

          print("Python executable:", sys.executable)
          print("Python version:", sys.version)
          resolver_path = pathlib.Path(resolver.__file__).resolve()
          duckdb_io_path = pathlib.Path(inspect.getfile(duckdb_io)).resolve()
          print("resolver module path:", resolver_path)
          print("duckdb_io.py path:", duckdb_io_path)
          print("duckdb_io.py sha256:", hashlib.sha256(duckdb_io_path.read_bytes()).hexdigest())
          print("duckdb version:", getattr(duckdb, "__version__", "unknown"))
          PY

      - name: Run DB tests
        run: python -m pytest -q resolver/tests/test_db_parity.py resolver/tests/test_duckdb_idempotency.py --junitxml=pytest-junit.xml

      - name: Build diagnostics bundle
        if: always()
        run: |
          suite="${{ github.job }}-${{ matrix.duckdb_label }}"
          python -m resolver.tools.ci_diag_bundle \
            --out diagnostics.zip \
            --db-url "${{ env.RESOLVER_DB_URL || '' }}" \
            --suite "$suite" \
            --duckdb-version "$(python -c "import duckdb;print(getattr(duckdb,'__version__','unknown'))")"

      - name: Upload diagnostics bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-bundle-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.job }}-${{ matrix.duckdb_label || 'na' }}
          path: diagnostics.zip
          overwrite: true

