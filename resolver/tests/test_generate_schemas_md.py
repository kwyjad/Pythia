from __future__ import annotations

import subprocess
import sys
from pathlib import Path

import yaml


ROOT = Path(__file__).resolve().parents[1]
SCRIPT = ROOT / "tools" / "generate_schemas_md.py"


def run_generator(tmp_path: Path, schema: dict, *extra_args: str) -> Path:
    schema_path = tmp_path / "schema.yml"
    output_path = tmp_path / "SCHEMAS.md"
    schema_path.write_text(yaml.safe_dump(schema), encoding="utf-8")
    args = [
        sys.executable,
        str(SCRIPT),
        "--in",
        str(schema_path),
        "--out",
        str(output_path),
        "--title",
        "Resolver Canonical Schemas",
        "--sort",
        *extra_args,
    ]
    subprocess.run(args, check=True)
    return output_path


def test_generate_markdown(tmp_path):
    schema = {
        "entities": {
            "facts": {
                "description": "Canonical monthly PIN/PA facts.",
                "keys": ["country_iso3", "hazard_type", "month"],
                "columns": [
                    {
                        "name": "country_iso3",
                        "type": "string",
                        "required": True,
                        "description": "ISO3 code",
                        "fk": {"table": "countries", "column": "iso3"},
                    },
                    {
                        "name": "hazard_type",
                        "type": "enum",
                        "required": True,
                        "enum": [
                            "flood",
                            "drought",
                            "conflict_escalation",
                            "conflict_onset",
                            "epidemic",
                            "wildfire",
                        ],
                        "description": "Hazard type.",
                    },
                    {
                        "name": "month",
                        "type": "date",
                        "format": "YYYY-MM",
                        "required": True,
                        "description": "Month of record.",
                    },
                    {
                        "name": "pin_new",
                        "type": "integer",
                        "description": "New people in need.",
                    },
                ],
            },
            "diagnostics": {
                "description": "Diagnostics dataset.",
                "columns": [
                    {
                        "name": "run_id",
                        "type": "string",
                        "required": True,
                        "description": "Run identifier.",
                    },
                    {
                        "name": "status",
                        "type": "enum",
                        "enum": [
                            "pending",
                            "running",
                            "complete",
                            "failed",
                            "blocked",
                            "skipped",
                        ],
                        "description": "Status flag.",
                    },
                ],
            },
        },
        "staging": {
            "description": "Legacy staging schema.",
            "keys": ["event_id"],
            "columns": [
                {
                    "name": "event_id",
                    "type": "string",
                    "required": True,
                    "description": "Event identifier.",
                },
                {
                    "name": "value",
                    "type": "number",
                    "description": "Numeric value.",
                },
            ],
        },
    }

    output_path = run_generator(tmp_path, schema)
    content = output_path.read_text(encoding="utf-8")

    assert "<!--- DO NOT EDIT: generated by resolver/tools/generate_schemas_md.py on" in content
    assert "# Resolver Canonical Schemas" in content
    assert "## Table of contents" in content
    assert "- [diagnostics](#diagnostics)" in content
    assert "- [facts](#facts)" in content
    assert "- [staging](#staging)" in content

    assert "## facts" in content
    assert "**Keys:** `country_iso3`, `hazard_type`, `month`" in content
    assert "| country_iso3 | string | yes |  | ISO3 code |" in content
    assert "| hazard_type | enum | yes | flood, drought, conflict_escalation, conflict_onset, epidemic<br>wildfire | Hazard type. |" in content
    assert "| month | date | yes | YYYY-MM | Month of record. |" in content
    assert "- `country_iso3` â†’ countries.iso3" in content

    assert "## diagnostics" in content
    assert "pending, running, complete, failed, blocked<br>skipped" in content

    assert "## staging" in content
    assert "Event identifier." in content


def test_fail_on_missing_description(tmp_path):
    schema = {
        "entities": {
            "facts": {
                "columns": [
                    {
                        "name": "country_iso3",
                        "type": "string",
                        "required": True,
                    }
                ]
            }
        }
    }

    schema_path = tmp_path / "schema.yml"
    output_path = tmp_path / "SCHEMAS.md"
    schema_path.write_text(yaml.safe_dump(schema), encoding="utf-8")

    args = [
        sys.executable,
        str(SCRIPT),
        "--in",
        str(schema_path),
        "--out",
        str(output_path),
        "--fail-on-missing-desc",
    ]
    proc = subprocess.run(args, capture_output=True, text=True)
    assert proc.returncode != 0
    assert "Missing descriptions for" in proc.stderr
    assert "facts.country_iso3" in proc.stderr
